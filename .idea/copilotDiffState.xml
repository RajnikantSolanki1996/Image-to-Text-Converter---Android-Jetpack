<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/fiveman/imagetotext/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/fiveman/imagetotext/HomeScreen.kt" />
              <option name="originalContent" value="package com.fiveman.imagetotext&#10;&#10;import android.Manifest&#10;import android.app.Activity.RESULT_OK&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material.icons.filled.ThumbUp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.content.FileProvider&#10;import androidx.navigation.NavController&#10;import android.content.Intent&#10;import android.os.Environment&#10;import android.util.Log&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    var tempImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (success &amp;&amp; tempImageUri != null) {&#10;            val encodedUri = URLEncoder.encode(tempImageUri.toString(), StandardCharsets.UTF_8.toString())&#10;            navController.navigate(&quot;crop/$encodedUri&quot;)&#10;            tempImageUri?.let { uri -&gt;&#10;                val file = File(uri.path!!)&#10;                if (file.exists()) file.delete()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            val tempFile = File(context.cacheDir, &quot;temp_image_${System.currentTimeMillis()}.jpg&quot;)&#10;            tempImageUri = FileProvider.getUriForFile(&#10;                context,&#10;                &quot;${context.packageName}.fileprovider&quot;,&#10;                tempFile&#10;            )&#10;            cameraLauncher.launch(tempImageUri)&#10;        } else {&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Gallery launcher with persistable permission and fallback&#10;    val galleryLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == RESULT_OK &amp;&amp; result.data != null) {&#10;            result.data?.data?.let { uri -&gt;&#10;                try {&#10;                    // Take persistable URI permission&#10;                    context.contentResolver.takePersistableUriPermission(&#10;                        uri,&#10;                        Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION&#10;                    )&#10;                    Log.d(&quot;HomeScreen&quot;, &quot;Persisted URI permission for: $uri&quot;)&#10;&#10;                    // Verify permission&#10;                    if (context.checkUriPermission(uri, android.os.Process.myPid(), android.os.Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION) == PackageManager.PERMISSION_GRANTED) {&#10;                        Log.d(&quot;HomeScreen&quot;, &quot;URI permission verified for: $uri&quot;)&#10;                        val encodedUri = URLEncoder.encode(uri.toString(), StandardCharsets.UTF_8.toString())&#10;                        navController.navigate(&quot;crop/$encodedUri&quot;)&#10;                    } else {&#10;                        Log.w(&quot;HomeScreen&quot;, &quot;Permission not granted, copying URI to local file&quot;)&#10;                        // Fallback: Copy URI to local file&#10;                        val localFile = createTempImageFile(context)&#10;                        copyUriToFile(context, uri, localFile)&#10;                        val localUri = FileProvider.getUriForFile(&#10;                            context,&#10;                            &quot;${context.packageName}.fileprovider&quot;,&#10;                            localFile&#10;                        )&#10;                        val encodedLocalUri = URLEncoder.encode(localUri.toString(), StandardCharsets.UTF_8.toString())&#10;                        navController.navigate(&quot;crop/$encodedLocalUri&quot;)&#10;                    }&#10;                } catch (e: SecurityException) {&#10;                    Log.e(&quot;HomeScreen&quot;, &quot;Failed to persist URI permission: ${e.message}&quot;)&#10;                    // Fallback to local file copy&#10;                    val localFile = createTempImageFile(context)&#10;                    copyUriToFile(context, uri, localFile)&#10;                    val localUri = FileProvider.getUriForFile(&#10;                        context,&#10;                        &quot;${context.packageName}.fileprovider&quot;,&#10;                        localFile&#10;                    )&#10;                    val encodedLocalUri = URLEncoder.encode(localUri.toString(), StandardCharsets.UTF_8.toString())&#10;                    navController.navigate(&quot;crop/$encodedLocalUri&quot;)&#10;                }&#10;            } ?: Log.w(&quot;HomeScreen&quot;, &quot;Gallery selection returned null URI&quot;)&#10;        }&#10;    }&#10;&#10;    // PDF launcher (disabled)&#10;    val pdfLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            Log.w(&quot;HomeScreen&quot;, &quot;PDF selected, but cropping PDFs is not supported yet&quot;)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Image to Text&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier.padding(bottom = 48.dp)&#10;        )&#10;&#10;        // Camera Option&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    if (ContextCompat.checkSelfPermission(&#10;                            context,&#10;                            Manifest.permission.CAMERA&#10;                        ) == PackageManager.PERMISSION_GRANTED&#10;                    ) {&#10;                        val tempFile = File(context.cacheDir, &quot;temp_image_${System.currentTimeMillis()}.jpg&quot;)&#10;                        tempImageUri = FileProvider.getUriForFile(&#10;                            context,&#10;                            &quot;${context.packageName}.fileprovider&quot;,&#10;                            tempFile&#10;                        )&#10;                        cameraLauncher.launch(tempImageUri)&#10;                    } else {&#10;                        cameraPermissionLauncher.launch(Manifest.permission.CAMERA)&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .height(60.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Star,&#10;                    contentDescription = &quot;Camera&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;Take Photo&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;&#10;        // Gallery Option&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {&#10;                        addCategory(Intent.CATEGORY_OPENABLE)&#10;                        type = &quot;image/*&quot;&#10;                        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)&#10;                    }&#10;                    galleryLauncher.launch(intent)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .height(60.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Phone,&#10;                    contentDescription = &quot;Gallery&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;Choose from Gallery&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;&#10;        // PDF Scan Option (Disabled)&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    Log.w(&quot;HomeScreen&quot;, &quot;PDF feature is not implemented yet&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .height(60.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiary&#10;                ),&#10;                enabled = false&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.ThumbUp,&#10;                    contentDescription = &quot;PDF Scan&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;Scan PDF&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Permission Dialog&#10;    if (showPermissionDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPermissionDialog = false },&#10;            title = { Text(&quot;Camera Permission Required&quot;) },&#10;            text = { Text(&quot;This app needs camera permission to take photos. Please grant the permission in app settings.&quot;) },&#10;            confirmButton = {&#10;                TextButton(onClick = { showPermissionDialog = false }) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun createTempImageFile(context: android.content.Context): File {&#10;    val timeStamp = SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.US).format(Date())&#10;    val storageDir = context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)&#10;    return File.createTempFile(&quot;JPEG_${timeStamp}_&quot;, &quot;.jpg&quot;, storageDir)&#10;}&#10;&#10;private fun copyUriToFile(context: android.content.Context, srcUri: Uri, dstFile: File) {&#10;    context.contentResolver.openInputStream(srcUri)?.use { inputStream -&gt;&#10;        FileOutputStream(dstFile).use { outputStream -&gt;&#10;            inputStream.copyTo(outputStream)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.fiveman.imagetotext&#10;&#10;import android.Manifest&#10;import android.app.Activity.RESULT_OK&#10;import android.content.pm.PackageManager&#10;import android.net.Uri&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Phone&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material.icons.filled.ThumbUp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.content.FileProvider&#10;import androidx.navigation.NavController&#10;import android.content.Intent&#10;import android.os.Environment&#10;import android.util.Log&#10;import java.io.File&#10;import java.io.FileOutputStream&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    var showPermissionDialog by remember { mutableStateOf(false) }&#10;    var tempImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    // Camera launcher&#10;    val cameraLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.TakePicture()&#10;    ) { success -&gt;&#10;        if (success &amp;&amp; tempImageUri != null) {&#10;            val encodedUri = URLEncoder.encode(tempImageUri.toString(), StandardCharsets.UTF_8.toString())&#10;            navController.navigate(&quot;crop/$encodedUri&quot;)&#10;            tempImageUri?.let { uri -&gt;&#10;                val file = File(uri.path!!)&#10;                if (file.exists()) file.delete()&#10;            }&#10;        }&#10;    }&#10;&#10;    // Camera permission launcher&#10;    val cameraPermissionLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            val tempFile = File(context.cacheDir, &quot;temp_image_${System.currentTimeMillis()}.jpg&quot;)&#10;            tempImageUri = FileProvider.getUriForFile(&#10;                context,&#10;                &quot;${context.packageName}.fileprovider&quot;,&#10;                tempFile&#10;            )&#10;            cameraLauncher.launch(tempImageUri)&#10;        } else {&#10;            showPermissionDialog = true&#10;        }&#10;    }&#10;&#10;    // Gallery launcher with persistable permission and fallback&#10;    val galleryLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == RESULT_OK &amp;&amp; result.data != null) {&#10;            result.data?.data?.let { uri -&gt;&#10;                try {&#10;                    // Take persistable URI permission&#10;                    context.contentResolver.takePersistableUriPermission(&#10;                        uri,&#10;                        Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION&#10;                    )&#10;                    Log.d(&quot;HomeScreen&quot;, &quot;Persisted URI permission for: $uri&quot;)&#10;&#10;                    // Verify permission&#10;                    if (context.checkUriPermission(uri, android.os.Process.myPid(), android.os.Process.myUid(), Intent.FLAG_GRANT_READ_URI_PERMISSION) == PackageManager.PERMISSION_GRANTED) {&#10;                        Log.d(&quot;HomeScreen&quot;, &quot;URI permission verified for: $uri&quot;)&#10;                        val encodedUri = URLEncoder.encode(uri.toString(), StandardCharsets.UTF_8.toString())&#10;                        navController.navigate(&quot;crop/$encodedUri&quot;)&#10;                    } else {&#10;                        Log.w(&quot;HomeScreen&quot;, &quot;Permission not granted, copying URI to local file&quot;)&#10;                        // Fallback: Copy URI to local file&#10;                        val localFile = createTempImageFile(context)&#10;                        copyUriToFile(context, uri, localFile)&#10;                        val localUri = FileProvider.getUriForFile(&#10;                            context,&#10;                            &quot;${context.packageName}.fileprovider&quot;,&#10;                            localFile&#10;                        )&#10;                        val encodedLocalUri = URLEncoder.encode(localUri.toString(), StandardCharsets.UTF_8.toString())&#10;                        navController.navigate(&quot;crop/$encodedLocalUri&quot;)&#10;                    }&#10;                } catch (e: SecurityException) {&#10;                    Log.e(&quot;HomeScreen&quot;, &quot;Failed to persist URI permission: ${e.message}&quot;)&#10;                    // Fallback to local file copy&#10;                    val localFile = createTempImageFile(context)&#10;                    copyUriToFile(context, uri, localFile)&#10;                    val localUri = FileProvider.getUriForFile(&#10;                        context,&#10;                        &quot;${context.packageName}.fileprovider&quot;,&#10;                        localFile&#10;                    )&#10;                    val encodedLocalUri = URLEncoder.encode(localUri.toString(), StandardCharsets.UTF_8.toString())&#10;                    navController.navigate(&quot;crop/$encodedLocalUri&quot;)&#10;                } catch (e: Exception) {&#10;                    Log.e(&quot;HomeScreen&quot;, &quot;Unexpected error: ${e.message}&quot;)&#10;                    // Handle unexpected errors gracefully&#10;                }&#10;            } ?: Log.w(&quot;HomeScreen&quot;, &quot;Gallery selection returned null URI&quot;)&#10;        }&#10;    }&#10;&#10;    // PDF launcher (disabled)&#10;    val pdfLauncher = rememberLauncherForActivityResult(&#10;        ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            Log.w(&quot;HomeScreen&quot;, &quot;PDF selected, but cropping PDFs is not supported yet&quot;)&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Text(&#10;            text = &quot;Image to Text&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            modifier = Modifier.padding(bottom = 48.dp)&#10;        )&#10;&#10;        // Camera Option&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    if (ContextCompat.checkSelfPermission(&#10;                            context,&#10;                            Manifest.permission.CAMERA&#10;                        ) == PackageManager.PERMISSION_GRANTED&#10;                    ) {&#10;                        val tempFile = File(context.cacheDir, &quot;temp_image_${System.currentTimeMillis()}.jpg&quot;)&#10;                        tempImageUri = FileProvider.getUriForFile(&#10;                            context,&#10;                            &quot;${context.packageName}.fileprovider&quot;,&#10;                            tempFile&#10;                        )&#10;                        cameraLauncher.launch(tempImageUri)&#10;                    } else {&#10;                        cameraPermissionLauncher.launch(Manifest.permission.CAMERA)&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .height(60.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Star,&#10;                    contentDescription = &quot;Camera&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;Take Photo&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;&#10;        // Gallery Option&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {&#10;                        addCategory(Intent.CATEGORY_OPENABLE)&#10;                        type = &quot;image/*&quot;&#10;                        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)&#10;                    }&#10;                    galleryLauncher.launch(intent)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .height(60.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                )&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Phone,&#10;                    contentDescription = &quot;Gallery&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;Choose from Gallery&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;&#10;        // PDF Scan Option (Disabled)&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Button(&#10;                onClick = {&#10;                    Log.w(&quot;HomeScreen&quot;, &quot;PDF feature is not implemented yet&quot;)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;                    .height(60.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.tertiary&#10;                ),&#10;                enabled = false&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.ThumbUp,&#10;                    contentDescription = &quot;PDF Scan&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;Scan PDF&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    // Permission Dialog&#10;    if (showPermissionDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showPermissionDialog = false },&#10;            title = { Text(&quot;Camera Permission Required&quot;) },&#10;            text = { Text(&quot;This app needs camera permission to take photos. Please grant the permission in app settings.&quot;) },&#10;            confirmButton = {&#10;                TextButton(onClick = { showPermissionDialog = false }) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun createTempImageFile(context: android.content.Context): File {&#10;    val timeStamp = SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.US).format(Date())&#10;    val storageDir = context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)&#10;    return File.createTempFile(&quot;JPEG_${timeStamp}_&quot;, &quot;.jpg&quot;, storageDir)&#10;}&#10;&#10;private fun copyUriToFile(context: android.content.Context, srcUri: Uri, dstFile: File) {&#10;    context.contentResolver.openInputStream(srcUri)?.use { inputStream -&gt;&#10;        FileOutputStream(dstFile).use { outputStream -&gt;&#10;            inputStream.copyTo(outputStream)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>